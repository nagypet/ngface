/*
 * Copyright 2020-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        springBootVersion = '2.4.5'
        lombokVersion = '1.18.8'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.36.1070'
    }
}

// Note that plugins block cannot be used in subprojects, that is wha the old fashioned way
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java-library'
apply plugin: 'cz.habarta.typescript-generator'


ext {
    set('spvitaminVersion', '1.6.0-RELEASE')
}

sourceCompatibility = 1.8

apply from: '../gradle/common.gradle'


repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'


    // -----------------------------------------------------------------------------------------------------------------
    // Compile dependencies
    // -----------------------------------------------------------------------------------------------------------------
    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // apache.commons
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.3'

    // Validation
    implementation 'javax.validation:validation-api'

    // FasterXML
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.1'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // Mapstruct
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.4.2.Final'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.4.2.Final'

    // Slf4J
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    // Google findbugs
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

    // -----------------------------------------------------------------------------------------------------------------
    // Test dependencies
    // -----------------------------------------------------------------------------------------------------------------
    // Lombok
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // spvitamin
    //testCompile project(':spvitamin-core')
    //testCompile project(':spvitamin-spring-general')
    testImplementation 'hu.perit.spvitamin:spvitamin-core'
    testImplementation 'hu.perit.spvitamin:spvitamin-spring-general'

    // JUnit
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.0'

    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
    testImplementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.10'
}


dependencyManagement {
    imports {
        mavenBom "hu.perit.spvitamin:spvitamin-dependencies:${spvitaminVersion}"
    }
}


test {
    useJUnitPlatform()
}


generateTypeScript {
    jsonLibrary = 'jackson2'
    classPatterns = [
            'hu.perit.ngface.widget.input.**',
            'hu.perit.ngface.widget.form.**',
            'hu.perit.ngface.widget.button.**',
            'hu.perit.ngface.widget.table.**',
            'hu.perit.ngface.data.SubmitFormData',
            'hu.perit.ngface.data.*Params'
    ]
    customTypeNaming = [
            'hu.perit.ngface.widget.input.TextInput$Data:TextInput.Data',
            'hu.perit.ngface.widget.input.NumericInput$Data:NumericInput.Data',
            'hu.perit.ngface.widget.input.DateInput$Data:DateInput.Data',
            'hu.perit.ngface.widget.input.DateTimeInput$Data:DateTimeInput.Data',
            'hu.perit.ngface.widget.input.DateRangeInput$Data:DateRangeInput.Data',
            'hu.perit.ngface.widget.input.Select$Data:Select.Data',
            'hu.perit.ngface.widget.table.Table$Data:Table.Data',
            'hu.perit.ngface.widget.table.Column$Size:Column.Size',
            'hu.perit.ngface.widget.table.ValueSet$Item:ValueSet.Item',
            'hu.perit.ngface.data.DataRetrievalParams$Page:DataRetrievalParams.Page',
            'hu.perit.ngface.data.DataRetrievalParams$Sort:DataRetrievalParams.Sort',
            'hu.perit.ngface.data.DataRetrievalParams$Filter:DataRetrievalParams.Filter',
            'hu.perit.ngface.data.DataRetrievalParams$Filter$Item:DataRetrievalParams.Filter.Item'
    ]
    outputFile = 'build/ngface-models.ts'
    outputFileType = 'implementationFile'
    outputKind = 'module'
    namespace = 'Ngface'
    //disableTaggedUnions = true
    optionalProperties = 'useSpecifiedAnnotations'
    optionalAnnotations = [
            'javax.annotation.Nullable'
    ]
    optionalPropertiesDeclaration = 'undefinableType'
}

dist.configure {
    finalizedBy generateTypeScript
}
